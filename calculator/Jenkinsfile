#!/usr/bin/env groovy

// Beautify display
def seperator60 = '\u2739' * 60
def seperator20 = '\u2739' * 20


node('builder-lab'){
      echo "${seperator60}\n${seperator20} Clone repo to workspace \n${seperator60}"
      stage('xterm') {
          checkout scm 
      }
   
      echo "${seperator60}\n${seperator20} Build And Integrate \n${seperator60}"
      stage('Build App'){
          dir('calculator'){
            sh './gradlew build'
          }  
      }
      
      echo "${seperator60}\n${seperator20} Build And Unit Test \n${seperator60}"
      stage('Test App'){
        dir('calculator'){
            sh './gradlew test' 
        }
      }
      
      echo "${seperator60}\n${seperator20} Build And Code Coverage \n${seperator60}"
      stage('Code Coverage App'){
        dir('calculator'){
            sh './gradlew jacocoTestReport' 
            sh './gradlew jacocoTestCoverageVerification' 
        } 
      }
      
      echo "${seperator60}\n${seperator20} Docker in docker build \n${seperator60}"
      stage('Building Docker'){
        dir('calculator'){
            sh 'docker build -t phelun/calc_cicd:2.0 -f Dockerfile .'
        }
      }

      stage("Docker login") {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            sh "docker login --username $USERNAME --password $PASSWORD"
                
            }
      }

      stage("Docker push") {
            sh "docker push phelun/calc_cicd:2.0" 
      }

      
      echo "${seperator60}\n${seperator20} Defined mathods \n${seperator60}"
      check_aws_connection()
      
}

// CUSTOM DSL METHODS
def setup_k8s_kube() {
    stage('Prep k8s'){
      withCredentials([usernamePassword(credentialsId: 'cicd-token', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID' )]){
        sh """
           ls -l
           aws sts get-caller-identity
           aws eks update-kubeconfig --name fmbah01 --region eu-west-1
           kubectl get nodes
           kubectl get ns
           helm init
           helm version
           helm ls
           helm install helm/wordpress

           # kubectl create serviceaccount --namespace kube-system tiller
           # kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
           # kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
           # helm init --service-account tiller --upgrade
           # sleep 30
           # helm version
        """
      }
    }
}

def check_aws_connection() {
    stage('AWS Creds'){
      withCredentials([usernamePassword(credentialsId: 'cicd-token', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID' )]){
        sh """
           aws ec2 describe-instances --region eu-west-1
        """
      }
    }
}

